import pandas as pd
from langchain_openai import ChatOpenAI
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
import os
import numpy as np

api_key = " my api key " 
os.environ["OPENAI_API_KEY"] = api_key
pd.set_option('future.no_silent_downcasting', True)
chat = ChatOpenAI(model_name='gpt-4', openai_api_key=api_key, temperature=0.7)

data_dir = 'D:/cryptodata/'
dataset_files = [f for f in os.listdir(data_dir) if f.endswith('.json')]

datasets = {file: pd.read_json(os.path.join(data_dir, file)) for file in dataset_files}

def select_relevant_datasets(query, datasets):
    prompt = f"The following datasets are available:\n\n"
    for file in datasets:
        prompt += f"- {file}: {', '.join(datasets[file].columns[:5])}...\n"
    prompt += f"\nBased on the user's query: '{query}', which dataset(s) should be used to answer the question? Please provide the relevant dataset names."
    
    response = chat(prompt)
    response_text = response.content
    relevant_files = []
    for file in datasets:
        if file.lower() in response_text.lower():
            relevant_files.append(file)
    
    return relevant_files

print("Data Loaded and function set up.")

while True:
    question = input("Enter your question (or type 'exit' to quit): ").strip()
    print("\n")
    if question.lower() in ['exit', 'quit']:
        print("Exiting...")
        break

    relevant_files = select_relevant_datasets(question, datasets)

    relevant_dfs = [datasets[file] for file in relevant_files]

    if not relevant_dfs:
        print("No relevant dataframes found for the query.")
        continue

    if len(relevant_dfs) > 1:
        merged_df = relevant_dfs[0]
        for df in relevant_dfs[1:]:
            merged_df = pd.merge(merged_df, df, on='Country Name', how='outer')
    else:
        merged_df = relevant_dfs[0]

    dfagent = create_pandas_dataframe_agent(
        llm=chat,
        df=merged_df,
        verbose=False,
        allow_dangerous_code=True
    )

    try:
        response = dfagent.invoke(question, handle_parsing_errors=True)
        print(response['output'])
        print("\n")
    except Exception as e:
        print(f"An error occurred: {e}")
        print(response)
